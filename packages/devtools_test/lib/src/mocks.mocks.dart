// Mocks generated by Mockito 5.0.17 from annotations
// in devtools_test/src/mocks.dart.
// Do not manually edit this file.

import 'dart:async' as _i7;
import 'dart:collection' as _i5;
import 'dart:ui' as _i6;

import 'package:devtools_app/src/service/vm_service_wrapper.dart' as _i4;
import 'package:devtools_app/src/shared/error_badge_manager.dart' as _i3;
import 'package:flutter/foundation.dart' as _i2;
import 'package:flutter/material.dart' as _i8;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeValueListenable_0<T> extends _i1.Fake
    implements _i2.ValueListenable<T> {}

/// A class which mocks [ErrorBadgeManager].
///
/// See the documentation for Mockito's code generation for more information.
class MockErrorBadgeManager extends _i1.Mock implements _i3.ErrorBadgeManager {
  MockErrorBadgeManager() {
    _i1.throwOnMissingStub(this);
  }

  @override
  void vmServiceOpened(_i4.VmServiceWrapper? service) => super.noSuchMethod(
        Invocation.method(#vmServiceOpened, [service]),
        returnValueForMissingStub: null,
      );
  @override
  void incrementBadgeCount(String? screenId) => super.noSuchMethod(
        Invocation.method(#incrementBadgeCount, [screenId]),
        returnValueForMissingStub: null,
      );
  @override
  void appendError(String? screenId, _i3.DevToolsError? error) =>
      super.noSuchMethod(
        Invocation.method(#appendError, [screenId, error]),
        returnValueForMissingStub: null,
      );
  @override
  _i2.ValueListenable<int> errorCountNotifier(String? screenId) =>
      (super.noSuchMethod(
        Invocation.method(#errorCountNotifier, [screenId]),
        returnValue: _FakeValueListenable_0<int>(),
      ) as _i2.ValueListenable<int>);
  @override
  _i2.ValueListenable<_i5.LinkedHashMap<String, _i3.DevToolsError>>
      erroredItemsForPage(String? screenId) => (super.noSuchMethod(
            Invocation.method(#erroredItemsForPage, [screenId]),
            returnValue: _FakeValueListenable_0<
                _i5.LinkedHashMap<String, _i3.DevToolsError>>(),
          ) as _i2
              .ValueListenable<_i5.LinkedHashMap<String, _i3.DevToolsError>>);
  @override
  void clearErrors(String? screenId) => super.noSuchMethod(
        Invocation.method(#clearErrors, [screenId]),
        returnValueForMissingStub: null,
      );
  @override
  void filterErrors(String? screenId, bool Function(String)? isValid) =>
      super.noSuchMethod(
        Invocation.method(#filterErrors, [screenId, isValid]),
        returnValueForMissingStub: null,
      );
  @override
  void markErrorAsRead(String? screenId, _i3.DevToolsError? error) =>
      super.noSuchMethod(
        Invocation.method(#markErrorAsRead, [screenId, error]),
        returnValueForMissingStub: null,
      );
  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(#dispose, []),
        returnValueForMissingStub: null,
      );
  @override
  void addAutoDisposeListener(
    _i2.Listenable? listenable, [
    _i6.VoidCallback? listener,
  ]) =>
      super.noSuchMethod(
        Invocation.method(#addAutoDisposeListener, [listenable, listener]),
        returnValueForMissingStub: null,
      );
  @override
  void autoDisposeStreamSubscription(
    _i7.StreamSubscription<dynamic>? subscription,
  ) =>
      super.noSuchMethod(
        Invocation.method(#autoDisposeStreamSubscription, [subscription]),
        returnValueForMissingStub: null,
      );
  @override
  void autoDisposeFocusNode(_i8.FocusNode? node) => super.noSuchMethod(
        Invocation.method(#autoDisposeFocusNode, [node]),
        returnValueForMissingStub: null,
      );
  @override
  void cancelStreamSubscriptions() => super.noSuchMethod(
        Invocation.method(#cancelStreamSubscriptions, []),
        returnValueForMissingStub: null,
      );
  @override
  void cancelListeners() => super.noSuchMethod(
        Invocation.method(#cancelListeners, []),
        returnValueForMissingStub: null,
      );
  @override
  void cancelFocusNodes() => super.noSuchMethod(
        Invocation.method(#cancelFocusNodes, []),
        returnValueForMissingStub: null,
      );
}
